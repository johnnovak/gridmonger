import std/math

import glm

import nanovg

type
  ColorSpace* = enum
    csAdobeRgb, csBt2020, csDciP3, csDisplayP3, csSrgb

var
  g_colorSpace* = csDciP3

# {{{ Transform matrices

# The transform matrices were generated by the colorspace-routine Python
# library by Star Brilliant <coder@poorlab.com>
#
# Forked repo (with Adobe RGB support added):
# https://github.com/johnnovak/colorspace-routines
#
# Results were double checked using this on-line calculator (using the
# Bradford transform):
# https://haraldbrendel.com/colorspacecalculator.html
#
# Note that GLM stores matrices as column vectors. So the matrices below
# *look* as if they were transposed, but actually they aren't.

# sRGB (Rec.709 / BT.709) to DCI-P3 (DCI whitepoint, 2.6 gamma)
let srgb_to_DciP3 = mat3(
  vec3(0.868579739716132,   0.0345404102543194,  0.0167714290414503),
  vec3(0.128919138460847,   0.96181138636192,    0.0710399977868858),
  vec3(0.00250112182302048, 0.00364820338376059, 0.912188573171664)
)

# sRGB (Rec.709 / BT.709) to Display P3 (D65 whitepoint, 2.2 gamma)
let srgb_to_DisplayP3 = mat3(
  vec3(0.822461968714362,  0.0331941988509616,  0.01708263072112),
  vec3(0.177538031285638,  0.966805801149038,   0.0723974406639634),
  vec3(0.0,                0.0,                 0.910519928614916)
)

# sRGB (Rec.709 / BT.709) to BT.2020
let srgb_to_Bt2020 = mat3(
  vec3(0.627403895934699, 0.069097289358232, 0.0163914388751502),
  vec3(0.329283038377884, 0.919540395075459, 0.0880133078772258),
  vec3(0.0433130656874172, 0.0113623155663092, 0.895595253247624)
)

# sRGB (Rec.709 / BT.709) to Adobe RGB (1998)
let srgb_to_AdobeRgb = mat3(
  vec3(0.715125606855624, 0.0,  0.0),
  vec3(0.284874393144375, 1.0,  0.0411619484501184),
  vec3(0.0,               0.0,  0.958838051549882)
)

# }}}

# {{{ gammaEncode()
func gammaEncode(color: Vec3[float], gamma: float): Color =
  rgb(
    pow(color[0], 1.0/gamma),
    pow(color[1], 1.0/gamma),
    pow(color[2], 1.0/gamma)
  )

# }}}
# {{{ srgbGammaDecode()
func srgbGammaDecode(color: Color): Vec3[float] =
  func decode(c: float): float =
    if abs(c) <= 0.04045:
      abs(c) / 12.92
    else:
      pow((abs(c) + 0.055) / 1.055, 2.4) * sgn(c).float

  vec3(
    decode(color.r),
    decode(color.g),
    decode(color.b)
  )

# }}}

# {{{ transformSrgbColor*()
proc transformSrgbColor*(c: Color, destColorSpace: ColorSpace): Color =

  proc transform(m: Mat3[float], gamma: float): Color =
    var d = c.srgbGammaDecode()
    d = m * d
    d.gammaEncode(gamma).withAlpha(c.a)

  case destColorSpace
  of csAdobeRgb:  transform(srgb_to_AdobeRgb, 2.2)
  of csBt2020:    transform(srgb_to_Bt2020, 2.2)
  of csDciP3:     transform(srgb_to_DciP3, 2.6)
  of csDisplayP3: transform(srgb_to_DisplayP3, 2.2)
  of csSrgb:      c
# }}}

# vim: et:ts=2:sw=2:fdm=marker
